"use client"
import { Inter } from "next/font/google";
import "./globals.css";
import { useCallback, useEffect, useRef, useState } from "react";
import { env } from "@/env/schema";
import { usePathname, useRouter } from "next/navigation";
import Navbar from "@/components/composite/Navbar";
import Playback from "@/components/composite/Playback";
import { PlaybackProvider } from "@/context/PlaybackContext";
const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const noAuthRequired = ["/login"]
  const router = useRouter()
  const pathname = usePathname()
  const [checkingOrg, setCheckingOrg] = useState(noAuthRequired.findIndex(ele => pathname.startsWith(ele)) === -1)
  const [checkingAuth, setCheckingAuth] = useState(noAuthRequired.findIndex(ele => pathname.startsWith(ele)) === -1)
  const checkAuth = async () => {
    console.log("checking auth")
    setCheckingAuth(true)
    const res = await fetch(`${env.NEXT_PUBLIC_API_URL}/auth/check`, {
      credentials: 'include',
    })
    setCheckingAuth(false)
    if (res.status === 401) {
      return router.push("/login")
    } else {
      await checkOrg()
    }
  }

  const checkOrg = async () => {
    setCheckingOrg(true)
    const res = await fetch(`${env.NEXT_PUBLIC_API_URL}/orgs/check`, {
      credentials: 'include',
    })
    const data = await res.json()
    setCheckingOrg(false)
    if (res.status !== 200 || !data) {
      router.push("/org/select")
    }
  }


  useEffect(() => {
    if (noAuthRequired.findIndex(ele => pathname.startsWith(ele)) === -1) checkAuth()
  }, [pathname])

  const noNavbarPath = ["/login", "/org/select", "/login"]

  const isNavbarRoute = noNavbarPath.findIndex(ele => pathname.startsWith(ele)) === -1
  const ref = useRef<HTMLAudioElement | null>(null)
  const [idPlaying, setIdPlaying] = useState<string>("");
  const [streamToken, setStreamToken] = useState<string>("");
  const [playbackLoading, setPlaybackLoading] = useState(false);
  const [playbackPlaying, setPlaybackPlaying] = useState(false);
  useEffect(() => {
    if (window && !ref.current) {
      ref.current = new Audio()
    }
  }, [])

  useEffect(() => {
    if (idPlaying !== "") {
      fetchStreamToken()
    }
  }, [idPlaying])

  useEffect(() => {
    if (streamToken !== "") {
      setupStream()
    }
  }, [streamToken])

  const setStreamId = useCallback((id: string) => {
    setIdPlaying(id)
  }, [])

  const fetchStreamToken = useCallback(async () => {
    setPlaybackLoading(true);
    const res = await fetch(`${env.NEXT_PUBLIC_API_URL}/stream/${idPlaying}/token`, {
      credentials: "include",
      method: "POST",
    });

    const data = await res.json();
    const token = data.token;
    setStreamToken(token);
    setPlaybackLoading(false);
  }, [idPlaying]);

  const play = useCallback(() => {
    if (!ref.current) return
    if (ref.current.duration === 0) return
    ref.current?.play()
    setPlaybackPlaying(true)
  }, [])

  const pause = useCallback(() => {
    console.log("pausing")
    ref.current?.pause()
    setPlaybackPlaying(false)
  }, [])

  const reset = useCallback(() => {
    if (!ref.current) return
    ref.current.currentTime = 0
  }, [])

  const setupStream = useCallback(() => {
    if (!ref.current) {
      return
    }
    ref.current.src = `${env.NEXT_PUBLIC_API_URL}/stream/${idPlaying}?token=${streamToken}`
  }, [idPlaying, streamToken])

  const startStream = useCallback((id: string) => {
    reset()
    if (idPlaying === id && streamToken !== "") {
      play()
      return
    }
    setIdPlaying(id)
  }, [idPlaying, streamToken])

  const state = {
    audioRef: ref, play, pause, reset, setupStream, fetchStreamToken, idPlaying, setStreamId, playbackLoading, playbackPlaying, startStream
  }

  return (
    <html lang="en">
      <body className={inter.className}>
        <PlaybackProvider value={state}>
          <div className="min-w-[100vw] flex">
            {isNavbarRoute && <Navbar />}

            <div className="flex justify-center w-full">
              <div className="w-[100%] min-h-[100vh] lg:w-[80%] p-10">
                {(checkingAuth || checkingOrg) ? "Loading..." : children}
              </div>
            </div>
          </div>
          <Playback />
        </PlaybackProvider>
      </body>
    </html>
  );
}
